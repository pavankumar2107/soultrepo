import boto3
import logging
from botocore.exceptions import ClientError
from utils.utils import generate_uuid
from utils.constants import USER, DYNAMODB, REGION

logger = logging.getLogger()
logger.setLevel(logging.INFO)

dynamodb = boto3.resource(DYNAMODB, region_name=REGION)

def get_table():
    return dynamodb.Table(USER)

class UserDao:
    @staticmethod
    def create_user(data):
        table = get_table()
        data['id'] = generate_uuid()
        try:
            table.put_item(Item=data)
            logger.info(f"Item: '{data}' added successfully")
            return data
        except ClientError as e:
            logger.exception(f"Failed to create user: {e}")
            raise

    @staticmethod
    def get_user(user_id):
        table = get_table()
        try:
            response = table.get_item(Key={"id": user_id})
            return response.get("Item")
        except ClientError as e:
            logger.exception(f"Failed to get user '{user_id}': {e}")
            raise

    @staticmethod
    def delete_user(user_id):
        table = get_table()
        try:
            table.delete_item(Key={"id": user_id})
            return {"message": "User deleted", "id": user_id}
        except ClientError as e:
            logger.exception(f"Failed to delete user '{user_id}': {e}")
            raise

    @staticmethod
    def update_user(user_id, new_data):
        table = get_table()
        try:
            update_expression = "SET "
            expression_attribute_names = {}
            expression_attribute_values = {}

            for key, value in new_data.items():
                attribute_name = f"#{key}"
                expression_attribute_names[attribute_name] = key
                expression_attribute_values[f":{key}"] = value
                update_expression += f"{attribute_name} = :{key}, "

            update_expression = update_expression.rstrip(", ")

            response = table.update_item(
                Key={"id": user_id},
                UpdateExpression=update_expression,
                ExpressionAttributeNames=expression_attribute_names,
                ExpressionAttributeValues=expression_attribute_values,
                ReturnValues="UPDATED_NEW"
            )
            return response.get("Attributes")
        except ClientError as e:
            logger.exception(f"Failed to update user '{user_id}': {e}")
            raise
